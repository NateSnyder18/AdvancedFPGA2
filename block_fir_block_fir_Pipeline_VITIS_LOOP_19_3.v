// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module block_fir_block_fir_Pipeline_VITIS_LOOP_19_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_load,
        delay_line_1_load_1,
        delay_line_2_load_1,
        delay_line_3_load_1,
        delay_line_4_load_1,
        delay_line_5_load_1,
        delay_line_6_load_1,
        delay_line_7_load_1,
        delay_line_8_load_1,
        delay_line_9_load_1,
        delay_line_10_load_1,
        delay_line_11_load_1,
        delay_line_12_load_1,
        delay_line_13_load_1,
        delay_line_14_load_1,
        delay_line_15_load,
        taps_0_load,
        taps_1_load,
        taps_2_load,
        taps_3_load,
        taps_4_load,
        taps_5_load,
        taps_6_load,
        taps_7_load,
        taps_8_load,
        taps_9_load,
        taps_10_load,
        taps_11_load,
        taps_12_load,
        taps_13_load,
        taps_14_load,
        taps_15_load,
        result_out,
        result_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_r_load;
input  [31:0] delay_line_1_load_1;
input  [31:0] delay_line_2_load_1;
input  [31:0] delay_line_3_load_1;
input  [31:0] delay_line_4_load_1;
input  [31:0] delay_line_5_load_1;
input  [31:0] delay_line_6_load_1;
input  [31:0] delay_line_7_load_1;
input  [31:0] delay_line_8_load_1;
input  [31:0] delay_line_9_load_1;
input  [31:0] delay_line_10_load_1;
input  [31:0] delay_line_11_load_1;
input  [31:0] delay_line_12_load_1;
input  [31:0] delay_line_13_load_1;
input  [31:0] delay_line_14_load_1;
input  [31:0] delay_line_15_load;
input  [31:0] taps_0_load;
input  [31:0] taps_1_load;
input  [31:0] taps_2_load;
input  [31:0] taps_3_load;
input  [31:0] taps_4_load;
input  [31:0] taps_5_load;
input  [31:0] taps_6_load;
input  [31:0] taps_7_load;
input  [31:0] taps_8_load;
input  [31:0] taps_9_load;
input  [31:0] taps_10_load;
input  [31:0] taps_11_load;
input  [31:0] taps_12_load;
input  [31:0] taps_13_load;
input  [31:0] taps_14_load;
input  [31:0] taps_15_load;
output  [31:0] result_out;
output   result_out_ap_vld;

reg ap_idle;
reg result_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln19_fu_354_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln19_reg_551;
wire  signed [31:0] tmp_1_fu_370_p35;
reg  signed [31:0] tmp_1_reg_555;
wire  signed [31:0] tmp_2_fu_442_p35;
reg  signed [31:0] tmp_2_reg_560;
wire   [31:0] mul_ln22_fu_337_p2;
reg   [31:0] mul_ln22_reg_565;
reg   [31:0] result_fu_130;
wire   [31:0] result_1_fu_522_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [4:0] i_fu_134;
wire   [4:0] add_ln19_fu_360_p2;
reg   [4:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_1_fu_370_p33;
wire   [3:0] trunc_ln19_fu_366_p1;
wire   [31:0] tmp_2_fu_442_p33;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [3:0] tmp_1_fu_370_p1;
wire   [3:0] tmp_1_fu_370_p3;
wire   [3:0] tmp_1_fu_370_p5;
wire   [3:0] tmp_1_fu_370_p7;
wire   [3:0] tmp_1_fu_370_p9;
wire   [3:0] tmp_1_fu_370_p11;
wire   [3:0] tmp_1_fu_370_p13;
wire   [3:0] tmp_1_fu_370_p15;
wire  signed [3:0] tmp_1_fu_370_p17;
wire  signed [3:0] tmp_1_fu_370_p19;
wire  signed [3:0] tmp_1_fu_370_p21;
wire  signed [3:0] tmp_1_fu_370_p23;
wire  signed [3:0] tmp_1_fu_370_p25;
wire  signed [3:0] tmp_1_fu_370_p27;
wire  signed [3:0] tmp_1_fu_370_p29;
wire  signed [3:0] tmp_1_fu_370_p31;
wire   [3:0] tmp_2_fu_442_p1;
wire   [3:0] tmp_2_fu_442_p3;
wire   [3:0] tmp_2_fu_442_p5;
wire   [3:0] tmp_2_fu_442_p7;
wire   [3:0] tmp_2_fu_442_p9;
wire   [3:0] tmp_2_fu_442_p11;
wire   [3:0] tmp_2_fu_442_p13;
wire   [3:0] tmp_2_fu_442_p15;
wire  signed [3:0] tmp_2_fu_442_p17;
wire  signed [3:0] tmp_2_fu_442_p19;
wire  signed [3:0] tmp_2_fu_442_p21;
wire  signed [3:0] tmp_2_fu_442_p23;
wire  signed [3:0] tmp_2_fu_442_p25;
wire  signed [3:0] tmp_2_fu_442_p27;
wire  signed [3:0] tmp_2_fu_442_p29;
wire  signed [3:0] tmp_2_fu_442_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 result_fu_130 = 32'd0;
#0 i_fu_134 = 5'd0;
#0 ap_done_reg = 1'b0;
end

block_fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U19(
    .din0(tmp_2_reg_560),
    .din1(tmp_1_reg_555),
    .dout(mul_ln22_fu_337_p2)
);

(* dissolve_hierarchy = "yes" *) block_fir_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U20(
    .din0(input_r_load),
    .din1(delay_line_1_load_1),
    .din2(delay_line_2_load_1),
    .din3(delay_line_3_load_1),
    .din4(delay_line_4_load_1),
    .din5(delay_line_5_load_1),
    .din6(delay_line_6_load_1),
    .din7(delay_line_7_load_1),
    .din8(delay_line_8_load_1),
    .din9(delay_line_9_load_1),
    .din10(delay_line_10_load_1),
    .din11(delay_line_11_load_1),
    .din12(delay_line_12_load_1),
    .din13(delay_line_13_load_1),
    .din14(delay_line_14_load_1),
    .din15(delay_line_15_load),
    .def(tmp_1_fu_370_p33),
    .sel(trunc_ln19_fu_366_p1),
    .dout(tmp_1_fu_370_p35)
);

(* dissolve_hierarchy = "yes" *) block_fir_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U21(
    .din0(taps_0_load),
    .din1(taps_1_load),
    .din2(taps_2_load),
    .din3(taps_3_load),
    .din4(taps_4_load),
    .din5(taps_5_load),
    .din6(taps_6_load),
    .din7(taps_7_load),
    .din8(taps_8_load),
    .din9(taps_9_load),
    .din10(taps_10_load),
    .din11(taps_11_load),
    .din12(taps_12_load),
    .din13(taps_13_load),
    .din14(taps_14_load),
    .din15(taps_15_load),
    .def(tmp_2_fu_442_p33),
    .sel(trunc_ln19_fu_366_p1),
    .dout(tmp_2_fu_442_p35)
);

block_fir_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_354_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_134 <= add_ln19_fu_360_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_134 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            result_fu_130 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            result_fu_130 <= result_1_fu_522_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln19_reg_551 <= icmp_ln19_fu_354_p2;
        mul_ln22_reg_565 <= mul_ln22_fu_337_p2;
        tmp_1_reg_555 <= tmp_1_fu_370_p35;
        tmp_2_reg_560 <= tmp_2_fu_442_p35;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_354_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_134;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_551 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        result_out_ap_vld = 1'b1;
    end else begin
        result_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_360_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln19_fu_354_p2 = ((ap_sig_allocacmp_i_1 == 5'd16) ? 1'b1 : 1'b0);

assign result_1_fu_522_p2 = (mul_ln22_reg_565 + result_fu_130);

assign result_out = result_fu_130;

assign tmp_1_fu_370_p33 = 'bx;

assign tmp_2_fu_442_p33 = 'bx;

assign trunc_ln19_fu_366_p1 = ap_sig_allocacmp_i_1[3:0];

endmodule //block_fir_block_fir_Pipeline_VITIS_LOOP_19_3
