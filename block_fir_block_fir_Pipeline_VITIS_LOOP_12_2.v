// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module block_fir_block_fir_Pipeline_VITIS_LOOP_12_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        delay_line_1_i,
        delay_line_1_o,
        delay_line_1_o_ap_vld,
        delay_line_15,
        delay_line_15_ap_vld,
        delay_line_14_i,
        delay_line_14_o,
        delay_line_14_o_ap_vld,
        delay_line_13_i,
        delay_line_13_o,
        delay_line_13_o_ap_vld,
        delay_line_12_i,
        delay_line_12_o,
        delay_line_12_o_ap_vld,
        delay_line_11_i,
        delay_line_11_o,
        delay_line_11_o_ap_vld,
        delay_line_10_i,
        delay_line_10_o,
        delay_line_10_o_ap_vld,
        delay_line_9_i,
        delay_line_9_o,
        delay_line_9_o_ap_vld,
        delay_line_8_i,
        delay_line_8_o,
        delay_line_8_o_ap_vld,
        delay_line_7_i,
        delay_line_7_o,
        delay_line_7_o_ap_vld,
        delay_line_6_i,
        delay_line_6_o,
        delay_line_6_o_ap_vld,
        delay_line_5_i,
        delay_line_5_o,
        delay_line_5_o_ap_vld,
        delay_line_4_i,
        delay_line_4_o,
        delay_line_4_o_ap_vld,
        delay_line_3_i,
        delay_line_3_o,
        delay_line_3_o_ap_vld,
        delay_line_2_i,
        delay_line_2_o,
        delay_line_2_o_ap_vld,
        delay_line_0_load
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] delay_line_1_i;
output  [31:0] delay_line_1_o;
output   delay_line_1_o_ap_vld;
output  [31:0] delay_line_15;
output   delay_line_15_ap_vld;
input  [31:0] delay_line_14_i;
output  [31:0] delay_line_14_o;
output   delay_line_14_o_ap_vld;
input  [31:0] delay_line_13_i;
output  [31:0] delay_line_13_o;
output   delay_line_13_o_ap_vld;
input  [31:0] delay_line_12_i;
output  [31:0] delay_line_12_o;
output   delay_line_12_o_ap_vld;
input  [31:0] delay_line_11_i;
output  [31:0] delay_line_11_o;
output   delay_line_11_o_ap_vld;
input  [31:0] delay_line_10_i;
output  [31:0] delay_line_10_o;
output   delay_line_10_o_ap_vld;
input  [31:0] delay_line_9_i;
output  [31:0] delay_line_9_o;
output   delay_line_9_o_ap_vld;
input  [31:0] delay_line_8_i;
output  [31:0] delay_line_8_o;
output   delay_line_8_o_ap_vld;
input  [31:0] delay_line_7_i;
output  [31:0] delay_line_7_o;
output   delay_line_7_o_ap_vld;
input  [31:0] delay_line_6_i;
output  [31:0] delay_line_6_o;
output   delay_line_6_o_ap_vld;
input  [31:0] delay_line_5_i;
output  [31:0] delay_line_5_o;
output   delay_line_5_o_ap_vld;
input  [31:0] delay_line_4_i;
output  [31:0] delay_line_4_o;
output   delay_line_4_o_ap_vld;
input  [31:0] delay_line_3_i;
output  [31:0] delay_line_3_o;
output   delay_line_3_o_ap_vld;
input  [31:0] delay_line_2_i;
output  [31:0] delay_line_2_o;
output   delay_line_2_o_ap_vld;
input  [31:0] delay_line_0_load;

reg ap_idle;
reg[31:0] delay_line_1_o;
reg delay_line_1_o_ap_vld;
reg delay_line_15_ap_vld;
reg[31:0] delay_line_14_o;
reg delay_line_14_o_ap_vld;
reg[31:0] delay_line_13_o;
reg delay_line_13_o_ap_vld;
reg[31:0] delay_line_12_o;
reg delay_line_12_o_ap_vld;
reg[31:0] delay_line_11_o;
reg delay_line_11_o_ap_vld;
reg[31:0] delay_line_10_o;
reg delay_line_10_o_ap_vld;
reg[31:0] delay_line_9_o;
reg delay_line_9_o_ap_vld;
reg[31:0] delay_line_8_o;
reg delay_line_8_o_ap_vld;
reg[31:0] delay_line_7_o;
reg delay_line_7_o_ap_vld;
reg[31:0] delay_line_6_o;
reg delay_line_6_o_ap_vld;
reg[31:0] delay_line_5_o;
reg delay_line_5_o_ap_vld;
reg[31:0] delay_line_4_o;
reg delay_line_4_o_ap_vld;
reg[31:0] delay_line_3_o;
reg delay_line_3_o_ap_vld;
reg[31:0] delay_line_2_o;
reg delay_line_2_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln12_fu_299_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] i_fu_92;
wire   [3:0] add_ln15_fu_305_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
wire   [3:0] i_2_load_fu_296_p1;
wire   [31:0] tmp_fu_311_p33;
wire   [31:0] tmp_fu_311_p31;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [3:0] tmp_fu_311_p1;
wire   [3:0] tmp_fu_311_p3;
wire   [3:0] tmp_fu_311_p5;
wire   [3:0] tmp_fu_311_p7;
wire   [3:0] tmp_fu_311_p9;
wire   [3:0] tmp_fu_311_p11;
wire   [3:0] tmp_fu_311_p13;
wire  signed [3:0] tmp_fu_311_p15;
wire  signed [3:0] tmp_fu_311_p17;
wire  signed [3:0] tmp_fu_311_p19;
wire  signed [3:0] tmp_fu_311_p21;
wire  signed [3:0] tmp_fu_311_p23;
wire  signed [3:0] tmp_fu_311_p25;
wire  signed [3:0] tmp_fu_311_p27;
wire  signed [3:0] tmp_fu_311_p29;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_92 = 4'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) block_fir_sparsemux_31_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h1 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h2 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h3 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h4 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h5 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h6 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h7 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h8 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h9 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'hA ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hB ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hC ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hD ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hE ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hF ),
    .din14_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_31_4_32_1_1_U1(
    .din0(delay_line_0_load),
    .din1(delay_line_1_i),
    .din2(delay_line_2_i),
    .din3(delay_line_3_i),
    .din4(delay_line_4_i),
    .din5(delay_line_5_i),
    .din6(delay_line_6_i),
    .din7(delay_line_7_i),
    .din8(delay_line_8_i),
    .din9(delay_line_9_i),
    .din10(delay_line_10_i),
    .din11(delay_line_11_i),
    .din12(delay_line_12_i),
    .din13(delay_line_13_i),
    .din14(delay_line_14_i),
    .def(tmp_fu_311_p31),
    .sel(ap_sig_allocacmp_i_2),
    .dout(tmp_fu_311_p33)
);

block_fir_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln12_fu_299_p2 == 1'd0)) begin
            i_fu_92 <= add_ln15_fu_305_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 4'd15;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_299_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 4'd15;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_92;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd10) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_10_o = tmp_fu_311_p33;
    end else begin
        delay_line_10_o = delay_line_10_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd10) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_10_o_ap_vld = 1'b1;
    end else begin
        delay_line_10_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd11) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_11_o = tmp_fu_311_p33;
    end else begin
        delay_line_11_o = delay_line_11_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd11) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_11_o_ap_vld = 1'b1;
    end else begin
        delay_line_11_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd12) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_12_o = tmp_fu_311_p33;
    end else begin
        delay_line_12_o = delay_line_12_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd12) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_12_o_ap_vld = 1'b1;
    end else begin
        delay_line_12_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd13) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_13_o = tmp_fu_311_p33;
    end else begin
        delay_line_13_o = delay_line_13_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd13) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_13_o_ap_vld = 1'b1;
    end else begin
        delay_line_13_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd14) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_14_o = tmp_fu_311_p33;
    end else begin
        delay_line_14_o = delay_line_14_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd14) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_14_o_ap_vld = 1'b1;
    end else begin
        delay_line_14_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd15) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_15_ap_vld = 1'b1;
    end else begin
        delay_line_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd1) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_1_o = tmp_fu_311_p33;
    end else begin
        delay_line_1_o = delay_line_1_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd1) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_1_o_ap_vld = 1'b1;
    end else begin
        delay_line_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd2) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_2_o = tmp_fu_311_p33;
    end else begin
        delay_line_2_o = delay_line_2_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd2) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_2_o_ap_vld = 1'b1;
    end else begin
        delay_line_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd3) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_3_o = tmp_fu_311_p33;
    end else begin
        delay_line_3_o = delay_line_3_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd3) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_3_o_ap_vld = 1'b1;
    end else begin
        delay_line_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd4) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_4_o = tmp_fu_311_p33;
    end else begin
        delay_line_4_o = delay_line_4_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd4) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_4_o_ap_vld = 1'b1;
    end else begin
        delay_line_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd5) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_5_o = tmp_fu_311_p33;
    end else begin
        delay_line_5_o = delay_line_5_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd5) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_5_o_ap_vld = 1'b1;
    end else begin
        delay_line_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd6) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_6_o = tmp_fu_311_p33;
    end else begin
        delay_line_6_o = delay_line_6_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd6) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_6_o_ap_vld = 1'b1;
    end else begin
        delay_line_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd7) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_7_o = tmp_fu_311_p33;
    end else begin
        delay_line_7_o = delay_line_7_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd7) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_7_o_ap_vld = 1'b1;
    end else begin
        delay_line_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd8) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_8_o = tmp_fu_311_p33;
    end else begin
        delay_line_8_o = delay_line_8_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd8) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_8_o_ap_vld = 1'b1;
    end else begin
        delay_line_8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd9) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_9_o = tmp_fu_311_p33;
    end else begin
        delay_line_9_o = delay_line_9_i;
    end
end

always @ (*) begin
    if (((i_2_load_fu_296_p1 == 4'd9) & (icmp_ln12_fu_299_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        delay_line_9_o_ap_vld = 1'b1;
    end else begin
        delay_line_9_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_305_p2 = ($signed(ap_sig_allocacmp_i_2) + $signed(4'd15));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign delay_line_15 = tmp_fu_311_p33;

assign i_2_load_fu_296_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln12_fu_299_p2 = ((ap_sig_allocacmp_i_2 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_fu_311_p31 = 'bx;

endmodule //block_fir_block_fir_Pipeline_VITIS_LOOP_12_2
